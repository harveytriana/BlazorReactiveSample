@page "/sample-2"

<h3>Cells</h3>
<hr />
<p>Reactivity in an object editing interface.</p>

@foreach (var c in cells) {
    <input value="@c.Index" class="label-cell" tabindex="-1"
           style="border-bottom: @BottomBorder(c.Index)"
           readonly="readonly">
    <input value="@c.Value" class="input-cell" maxlength="12"
           style="border-bottom: @BottomBorder(c.Index)"
           @onchange="(_ => GetSum(c, _.Value.ToString()))">
    <br />
}
<br />
<h4>Sum: @result</h4>

@code {
    class Cell
    {
        public int Index { get; set; }
        public decimal Value { get; set; }
    }

    int SAMPLECELLS = 16;

    List<Cell> cells = new();

    protected override void OnInitialized()
    {
        var random = new Random();
        for (int i = 0; i < SAMPLECELLS; i++) {
            cells.Add(new Cell {
                Index = i,
                Value = (decimal)Math.Round(1000 * random.NextDouble(), 2)
            });
        }
        result = cells.Sum(x => x.Value);
    }

    // reactive result
    decimal result;

    void GetSum(Cell cell, string value)
    {
        // filter bad entries
        decimal.TryParse(value, out decimal x);
        // update cell value
        cell.Value = x;
        // update sum 
        result = cells.Sum(x => x.Value);
    }

    string BottomBorder(int cellIndex)
    {
        // cell close line or none
        return cellIndex == SAMPLECELLS - 1 ? "1px solid lightgray" : "none";
    }
}
